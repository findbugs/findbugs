<!--
    FindBugs Test Cases Ant build script.
    Based on original FindBugs Ant Script by Mike Fagan.
    Rewritten 1/5/2005 by David Hovemeyer, 2/6/2006 by Brian Cole.
-->

<project name="findbugsTestCases" default="build">

    <property file="build.properties" />
    <!--
            The local.properties properties file contains the location of findbugs.home

            This value is likely to be different for each checkout of the plugin,
            so the local.properties file is not managed by cvs

    -->
    <property file="local.properties" />
        <property name="fb-ant.jar" value="${findbugs.home}/lib/findbugs-ant.jar" />
        <property name="fb-baseline-ant.jar" value="${findbugs-baseline.home}/lib/findbugs-ant.jar" />
    <property name="history.dir" value="history"/>

        <path id="build.classpath">
        <pathelement location="${findbugs.home}/lib/annotations.jar" />
        <pathelement location="${findbugs.home}/lib/findbugs.jar" />
        <pathelement location="${findbugs.home}/lib/jsr305.jar"/>
        <pathelement location="${junit.home}/junit.jar"/>
        <fileset dir="lib">
          <include name="*.jar"/>
         </fileset>
    </path>

    <target name="build" depends="classes,runfindbugs,runEffort" />

         <target name="init">
                <!-- true to recompile FB core (if findbugs.jar is not there) -->
                <condition property="fb.recompile" >
                  <not><available file="${fb-ant.jar}" /></not>
        </condition>
        </target>

        <target name="fbcompile" if="fb.recompile" >
                <echo message="Building Findbugs core libraries"/>
                <ant dir="${findbugs.home}" inheritall="false" target="build" />
        </target>



    <target name="errorprone" depends="clean">
        <mkdir dir="build/classes"/>
        <javac  destdir="build/classes" source="1.7" debug="on"
                        includeantruntime="false"
		 compiler="com.google.errorprone.ErrorProneAntCompilerAdapter"
            >
            <src path="src/java"/>
            <src path="src/fakeAnnotations"/>
            <src path="src/fakeLibraries"/>
            <classpath>
                <path refid="build.classpath"/>
            </classpath>
		    <compilerarg value="-Xlint:none"/>
		</javac>
    </target>
    <target name="classes">
        <mkdir dir="build/classes"/>
        <javac  destdir="build/classes" source="1.7" debug="on"
                        includeantruntime="false"
            >
            <src path="src/java"/>
            <src path="src/fakeAnnotations"/>
            <src path="src/fakeLibraries"/>
            <classpath>
                <path refid="build.classpath"/>
            </classpath>
		    <compilerarg value="-Xlint:none"/>
		</javac>
    </target>

   <target name="jarFile" depends ="classes">
        <delete quiet="true">
            <fileset dir="build/all.jar"/>
        </delete>
        <jar destfile="build/all.jar">
            <fileset dir="build/classes"/>

        </jar>
    </target>


        <target name="clean">
                <delete dir="build/classes"/>
                <mkdir dir="build/classes" />
                <delete file="build/all.jar"/>
		<delete failonerror="false">
		   <fileset dir="build" includes="*.xml"/>
        	</delete>
        </target>



    <target name="runfindbugs" depends="init,fbcompile,classes">
    <echo>Home is ${fb-ant.jar}</echo>
     <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
           classpath="${fb-ant.jar}"/>
        <parallel threadsPerProcessor="1">
            <antcall target="historyNormal"/> <!--   run findbugs effort=default, then merge or copy results -->       <!-- run findbugs effort=max, then merge or copy results -->
        </parallel>
    </target>

    <target name="runBaseline" depends="classes" if="findbugs-baseline.home">
    <echo>Home is ${findbugs-baseline.home}</echo>
    <echo>fb-ant jar is ${fb-baseline-ant.jar}</echo>
     <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
           classpath="${fb-baseline-ant.jar}"/>
    <findbugs home="${findbugs-baseline.home}"  jvmargs="-ea -Xmx900m"
                         output="xml:withMessages" timestampNow="true" reportLevel="low" chooseVisitors="+CheckExpectedWarnings" outputFile="build/baseline.xml">
            <sourcePath path="${basedir}/src/java" />
	    <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>
    </target>


    <target name="runEffort" depends="classes">
     <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
           classpath="${fb-ant.jar}"/>
    	<echo>Test expected warnings with *min* effort</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea -Xmx900m"
                         output="xml:withMessages" timestampNow="true" reportLevel="low" effort="min"  chooseVisitors="+CheckExpectedWarnings" outputFile="build/minEffort.xml">
            <sourcePath path="${basedir}/src/java" />
	    <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

    	<echo>Test expected warnings with *less* effort</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea -Xmx900m"
                         output="xml:withMessages" timestampNow="true" reportLevel="low" effort="less"  chooseVisitors="+CheckExpectedWarnings" outputFile="build/lessEffort.xml">
            <sourcePath path="${basedir}/src/java" />
	    <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

    	<echo>Test expected warnings with *more* effort</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea -Xmx900m"
                         output="xml:withMessages" timestampNow="true" reportLevel="low" effort="more"  chooseVisitors="+CheckExpectedWarnings" outputFile="build/moreEffort.xml">
            <sourcePath path="${basedir}/src/java" />
	    <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

    	<echo>Test expected warnings with *max* effort</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea -Xmx900m"
                         output="xml:withMessages" timestampNow="true" reportLevel="low" effort="max"  chooseVisitors="+CheckExpectedWarnings" outputFile="build/maxEffort.xml">
            <sourcePath path="${basedir}/src/java" />
	    <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>

    </target>



    <target name="runNormal" depends="classes">
     <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
           classpath="${fb-ant.jar}"/>
<taskdef name="filterBugs" classname="edu.umd.cs.findbugs.anttask.FilterBugsTask"
           classpath="${fb-ant.jar}"/>
<taskdef name="printBugs" classname="edu.umd.cs.findbugs.anttask.ConvertXmlToTextTask"
           classpath="${fb-ant.jar}"/>

    	<echo>Test expected warnings with javac bytecode</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea -Xmx900m -Dfindbugs.sf.comment=false"
                         output="xml:withMessages" timestampNow="true" reportLevel="low" chooseVisitors="+CheckExpectedWarnings" outputFile="build/normal.xml">
            <sourcePath path="${basedir}/src/java" />
	    <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>
	<filterBugs home="${findbugs.home}" 
		priority="1"
		bugPattern="FB"
		inputFile="build/normal.xml"
		outputFile="build/unexpected.xml">
	</filterBugs>
	<printBugs home="${findbugs.home}" 
		inputFile="build/unexpected.xml"
		format="text">
	</printBugs>

    	<echo>Test expected warnings with javac bytecode and source</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea -Xmx900m -Dfindbugs.sf.comment=true"
                         output="xml:withMessages" timestampNow="true" reportLevel="low" chooseVisitors="+CheckExpectedWarnings" outputFile="build/analyzeSource.xml">
            <sourcePath path="${basedir}/src/java" />
	    <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/build/classes" />
        </findbugs>
	  <filterBugs home="${findbugs.home}"
                priority="1"
                bugPattern="FB"
                inputFile="build/analyzeSource.xml"
                outputFile="build/unexpectedWithSource.xml">
        </filterBugs>
        <printBugs home="${findbugs.home}"
                inputFile="build/unexpectedWithSource.xml"
                format="text">
	</printBugs>

    	<echo>Test expected warnings with ecj bytecode</echo>
        <findbugs home="${findbugs.home}"  jvmargs="-ea -Xmx900m"
                         output="xml:withMessages" timestampNow="true" reportLevel="low" chooseVisitors="+CheckExpectedWarnings" outputFile="build/normalEclipse.xml"
            noClassOk="true">
            <sourcePath path="${basedir}/src/java" />
	    <auxclasspath refid="build.classpath"/>
            <class location="${basedir}/classesEclipse" />
        </findbugs>
	  <filterBugs home="${findbugs.home}"
                priority="1"
                bugPattern="FB"
                inputFile="build/normalEclipse.xml"
                outputFile="build/unexpectedEclipse.xml">
        </filterBugs>
        <printBugs home="${findbugs.home}"
                inputFile="build/unexpectedEclipse.xml"
                format="text">
	</printBugs>

    </target>


    <target name="historyNormal" depends="mergeNormal,copyNormal"/>

    <target name="mergeNormal" depends="runNormal,existance" if="exists.normal">
        <exec dir="." executable="${findbugs.home}/bin/computeBugHistory">
                    <arg value="-output" />
                    <arg file="${history.dir}/normal.xml" />
                    <arg file="${history.dir}/normal.xml" />
                    <arg file="build/normal.xml" />
        </exec>
    </target>


    <target name="existance">
        <available property="exists.normal" file="${history.dir}/normal.xml"/>
    </target>

    <target name="copyNormal" depends="runNormal,existance" unless="exists.normal">
        <copy file="build/normal.xml" todir="${history.dir}"/>
    </target>


</project>

<!-- vim:set ts=4: -->
